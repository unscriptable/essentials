//@flow
declare export var compose2 : Compose2
declare export var compose3 : Compose3
declare export var compose4 : Compose4
declare export var compose5 : Compose5
declare export var compose : Compose

import type {
    UnaryFn, BinaryFn, TernaryFn, QuarternaryFn, QuinaryFn
} from './types'

type Compose2_1
    = <A1,I1,R>(f:UnaryFn<I1,R>, g:UnaryFn<A1,I1>) => UnaryFn<A1,R>
type Compose2_2
    = <A1,A2,I1,R>(f:UnaryFn<I1,R>, g:BinaryFn<A1,A2,I1>) => BinaryFn<A1,A2,R>
type Compose2_3
    = <A1,A2,A3,I1,R>(f:UnaryFn<I1,R>, g:TernaryFn<A1,A2,A3,I1>) => TernaryFn<A1,A2,A3,R>
type Compose2_4
    = <A1,A2,A3,A4,I1,R>(f:UnaryFn<I1,R>, g:QuarternaryFn<A1,A2,A3,A4,I1>) => QuarternaryFn<A1,A2,A3,A4,R>
type Compose2_5
    = <A1,A2,A3,A4,A5,I1,R>(f:UnaryFn<I1,R>, g:QuinaryFn<A1,A2,A3,A4,A5,I1>) => QuinaryFn<A1,A2,A3,A4,A5,R>
type Compose2 = Compose2_5 & Compose2_4 & Compose2_3 & Compose2_2 & Compose2_1

type Compose3_1
    = <A1,I1,I2,R>(f:UnaryFn<I2,R>, g:UnaryFn<I1,I2>, h:UnaryFn<A1,I1>) => UnaryFn<A1,R>
type Compose3_2
    = <A1,A2,I1,I2,R>(f:UnaryFn<I2,R>, g:UnaryFn<I1,I2>, h:BinaryFn<A1,A2,I1>) => BinaryFn<A1,A2,R>
type Compose3_3
    = <A1,A2,A3,I1,I2,R>(f:UnaryFn<I2,R>, g:UnaryFn<I1,I2>, h:BinaryFn<A1,A2,A3,I1>) => TernaryFn<A1,A2,A3,R>
type Compose3_4
    = <A1,A2,A3,A4,I1,I2,R>(f:UnaryFn<I2,R>, g:UnaryFn<I1,I2>, h:BinaryFn<A1,A2,A3,A4,I1>) => QuarternaryFn<A1,A2,A3,A4,R>
type Compose3_5
    = <A1,A2,A3,A4,A5,I1,I2,R>(f:UnaryFn<I2,R>, g:UnaryFn<I1,I2>, h:BinaryFn<A1,A2,A3,A4,A5,I1>) => QuinaryFn<A1,A2,A3,A4,A5,R>
type Compose3 = Compose3_5 & Compose3_4 & Compose3_3 & Compose3_2 & Compose3_1

type Compose4_1
    = <A1,I1,I2,I3,R>(f:UnaryFn<I3,R>, g:UnaryFn<I2,I3>, h:UnaryFn<I1,I2>, j:UnaryFn<A1,I1>) => UnaryFn<A1,R>
type Compose4_2
    = <A1,A2,I1,I2,I3,R>(f:UnaryFn<I3,R>, g:UnaryFn<I2,I3>, h:UnaryFn<I1,I2>, j:UnaryFn<A1,A2,I1>) => BinaryFn<A1,A2,R>
type Compose4_3
    = <A1,A2,A3,I1,I2,I3,R>(f:UnaryFn<I3,R>, g:UnaryFn<I2,I3>, h:UnaryFn<I1,I2>, j:UnaryFn<A1,A2,A3,I1>) => TernaryFn<A1,A2,A3,R>
type Compose4_4
    = <A1,A2,A3,A4,I1,I2,I3,R>(f:UnaryFn<I3,R>, g:UnaryFn<I2,I3>, h:UnaryFn<I1,I2>, j:UnaryFn<A1,A2,A3,A4,I1>) => QuarternaryFn<A1,A2,A3,A4,R>
type Compose4_5
    = <A1,A2,A3,A4,A5,I1,I2,I3,R>(f:UnaryFn<I3,R>, g:UnaryFn<I2,I3>, h:UnaryFn<I1,I2>, j:UnaryFn<A1,A2,A3,A4,A5,I1>) => QuinaryFn<A1,A2,A3,A4,A5,R>
type Compose4 = Compose4_5 & Compose4_4 & Compose4_3 & Compose4_2 & Compose4_1

type Compose5_1
    = <A1,I1,I2,I3,I4,R>(f:UnaryFn<I4,R>, g:UnaryFn<I3,I4>, h:UnaryFn<I2,I3>, j:UnaryFn<I1,I2>, k:UnaryFn<A1,I1>) => UnaryFn<A1,R>
type Compose5_2
    = <A1,A2,I1,I2,I3,I4,R>(f:UnaryFn<I4,R>, g:UnaryFn<I3,I4>, h:UnaryFn<I2,I3>, j:UnaryFn<I1,I2>, k:UnaryFn<A1,A2,I1>) => BinaryFn<A1,A2,R>
type Compose5_3
    = <A1,A2,A3,I1,I2,I3,I4,R>(f:UnaryFn<I4,R>, g:UnaryFn<I3,I4>, h:UnaryFn<I2,I3>, j:UnaryFn<I1,I2>, k:UnaryFn<A1,A2,A3,I1>) => TernaryFn<A1,A2,A3,R>
type Compose5_4
    = <A1,A2,A3,A4,I1,I2,I3,I4,R>(f:UnaryFn<I4,R>, g:UnaryFn<I3,I4>, h:UnaryFn<I2,I3>, j:UnaryFn<I1,I2>, k:UnaryFn<A1,A2,A3,A4,I1>) => QuarternaryFn<A1,A2,A3,A4,R>
type Compose5_5
    = <A1,A2,A3,A4,A5,I1,I2,I3,I4,R>(f:UnaryFn<I4,R>, g:UnaryFn<I3,I4>, h:UnaryFn<I2,I3>, j:UnaryFn<I1,I2>, k:UnaryFn<A1,A2,A3,A4,A5,I1>) => QuarternaryFn<A1,A2,A3,A4,A5,R>
type Compose5 = Compose5_5 & Compose5_4 & Compose5_3 & Compose5_2 & Compose5_1

type Compose
    = Compose5_5 & Compose5_4 & Compose5_3 & Compose5_2 & Compose5_1
    & Compose4_5 & Compose4_4 & Compose4_3 & Compose4_2 & Compose4_1
    & Compose3_5 & Compose3_4 & Compose3_3 & Compose3_2 & Compose3_1
    & Compose2_5 & Compose2_4 & Compose2_3 & Compose2_2 & Compose2_1
    & (...fs:Array<Function>) => Function
