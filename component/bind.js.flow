//@flow

declare export var bind : <T:Object>(Element, BindSpecs<T>) => BindFunction<T>
declare export var bindStatic : <T:Object>(Element, BindSpecs<T>) => BindFunction<T>

declare export var updater : <T:Object>(BindSpecs<T>) => (Element, T) => void

declare export var setProp
    : string => SetOperation<Element>

declare export var unsetProp
    : string => UnsetOperation<Element>

declare export var setAttr
    : string => SetOperation<Element>

declare export var unsetAttr
    : string => UnsetOperation<Element>

declare export var setClassNames
    : ((Element, string) => any) => SetOperation<Element>

declare export var unsetClassNames
    : (Element => any) => UnsetOperation<Element>

type BindFunction
    = <T:Object>(T) => T

type BindSpecs<T:Object>
    = { [key:$Keys<T>]: BindSpec | Array<BindSpec> }

type BindSpec
    = {| query?: string, attr: string, dynamic?: boolean |}
    | {| query?: string, prop: string, dynamic?: boolean |}
    | {| query?: string, setter: Function, dynamic?: boolean |}

type SetOperation<T> = (el:T) => (value:mixed) => T

type UnsetOperation<T> = (el:T) => () => T
