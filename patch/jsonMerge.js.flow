//@flow
declare export var jsonMerge : Clone => JsonMerge

declare export var jsonMergeCollection : Clone => JsonMergeCollection

declare export var arrayAdapter : ArrayAdapter

declare export var hashMapAdapter : HashMapAdapter

type HashMap<I> = { [key:string]: I }

type Maybe = <T>(T) => ?T

// Perhaps some day this will work.  It's too permissive as of 0.65.0:
type Patch<I:Object> = $Supertype<$ObjMap<I, Maybe>>

type JsonMerge = <I:Object,P:Patch<I>>(I,P) => I

type JsonMergePatcher<I:Object>
    = (Array<I>, Array<Patch<I>>) => Array<I>
    & (HashMap<I>, HashMap<Patch<I>>) => HashMap<I>

// TODO: why doesn't this work?
// type Clone = <T>(T) => T
type Clone = Function

type JsonMergeCollection
    = <I:Object>({
        insert: (Array<I>, I, string) => any,
        remove: (Array<I>, I, string) => any,
        replace: (Array<I>, I, I, string) => any
    }) => (Array<I>, Array<Patch<I>>) => Array<I>
    | <I:Object>({
        insert: (HashMap<I>, I, string) => any,
        remove: (HashMap<I>, I, string) => any,
        replace: (HashMap<I>, I, I, string) => any
    }) => (HashMap<I>, HashMap<Patch<I>>) => HashMap<I>


type ArrayAdapter
    = {
        insert: <I:Object>(Array<I>, I, string) => any,
        remove: <I:Object>(Array<I>, I, string) => any,
        replace: <I:Object>(Array<I>, I, I, string) => any
    }

type HashMapAdapter
    = {
        insert: <I:Object>(HashMap<I>, I, string) => any,
        remove: <I:Object>(HashMap<I>, I, string) => any,
        replace: <I:Object>(HashMap<I>, I, I, string) => any
    }
